name: CD # Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: Release Please 🏷️
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      created: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          command: manifest

  release-assets:
    name: Publishing for ${{ matrix.os }}
    needs: [release-please]
    if: needs.release-please.outputs.created
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            os-name: macos
            target: x86_64-apple-darwin
            architecture: x86_64
            binary-postfix: ""
            binary-name: dnote-tui
            use-cross: false
          - os: macos-latest
            os-name: macos
            target: aarch64-apple-darwin
            architecture: arm64
            binary-postfix: ""
            use-cross: false
            binary-name: dnote-tui
          - os: ubuntu-latest
            os-name: linux
            target: x86_64-unknown-linux-gnu
            architecture: x86_64
            binary-postfix: ""
            use-cross: false
            binary-name: dnote-tui
          - os: windows-latest
            os-name: windows
            target: x86_64-pc-windows-msvc
            architecture: x86_64
            binary-postfix: ".exe"
            use-cross: false
            binary-name: dnote-tui
          - os: ubuntu-latest
            os-name: linux
            target: aarch64-unknown-linux-gnu
            architecture: arm64
            binary-postfix: ""
            use-cross: true
            binary-name: dnote-tui
          - os: ubuntu-latest
            os-name: linux
            target: i686-unknown-linux-gnu
            architecture: i686
            binary-postfix: ""
            use-cross: true
            binary-name: dnote-tui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.use-cross }}
          toolchain: stable
          args: --release --target ${{ matrix.target }}
      - name: Install strip command
        shell: bash
        run: |
          if [[ ${{ matrix.target }} == aarch64-unknown-linux-gnu ]]; then
              sudo apt update
              sudo apt-get install -y binutils-aarch64-linux-gnu
          fi
      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          ####### reduce binary size by removing debug symbols #######

          BINARY_NAME=${{ matrix.binary-name }}${{ matrix.binary-postfix }}
          if [[ ${{ matrix.target }} == aarch64-unknown-linux-gnu ]]; then
            GCC_PREFIX="aarch64-linux-gnu-"
          else
            GCC_PREFIX=""
          fi
          "$GCC_PREFIX"strip $BINARY_NAME

          ########## create tar.gz ##########

          RELEASE_NAME=${{ matrix.binary-name }}-${GITHUB_REF/refs\/tags\//}-${{ matrix.os-name }}-${{ matrix.architecture }}

          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME

          ########## create sha256 ##########

          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi

      - name: Releasing assets 📦
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/${{ matrix.target }}/release/${{ matrix.binary-name }}-*.tar.gz
            target/${{ matrix.target }}/release/${{ matrix.binary-name }}-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to crates.io 📦
    runs-on: ubuntu-latest
    needs: [release-please]
    if: needs.release-please.outputs.created
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - uses: swatinem/rust-cache@v2
      - name: Publish
      # https://doc.rust-lang.org/cargo/reference/config.html?highlight=CARGO_REGISTRY_TOKEN#credentials
        run: >
          cargo publish
          --verbose
          --locked
          --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
